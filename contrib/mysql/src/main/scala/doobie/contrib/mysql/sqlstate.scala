package doobie.contrib.mysql

/**
 * Module of SQLState constants for MySQL
 * Note that MySQL Sort of sucks when it comes to 
 * SQLState support and it cops out. You probably want
 * The mysql_error module instead.
 */
object sqlstate {
  type SqlState = doobie.enum.sqlstate.SqlState
  val SqlState = doobie.enum.sqlstate.SqlState


  // Unlike Postgres module not organised into grouped classes (yet)
  // as there's no real consistency with mysql's use of sqlstate errors
  val DUP_KEY = SqlState("23000")
  val OUTOFMEMORY = SqlState("S1001")
  val OUT_OF_SORTMEMORY = SqlState("S1001")
  val CON_COUNT_ERROR = SqlState("08004")
  val BAD_HOST_ERROR = SqlState("08004")
  val HANDSHAKE_ERROR = SqlState("08004")
  val DBACCESS_DENIED_ERROR = SqlState("42000")
  val ACCESS_DENIED_ERROR = SqlState("28000")
  val NO_DB_ERROR = SqlState("3D000")
  val UNKNOWN_COM_ERROR = SqlState("08S01")
  val BAD_NULL_ERROR = SqlState("23000")
  val BAD_DB_ERROR = SqlState("42000")
  val TABLE_EXISTS_ERROR = SqlState("42S01")
  val BAD_TABLE_ERROR = SqlState("42S02")
  val NON_UNIQ_ERROR = SqlState("23000")
  val SERVER_SHUTDOWN = SqlState("08S01")
  val BAD_FIELD_ERROR = SqlState("S0022")
  val WRONG_FIELD_WITH_GROUP = SqlState("S1009")
  val WRONG_GROUP_FIELD = SqlState("S1009")
  val WRONG_SUM_SELECT = SqlState("S1009")
  val WRONG_VALUE_COUNT = SqlState("21S01")
  val TOO_LONG_IDENT = SqlState("S1009")
  val DUP_FIELDNAME = SqlState("S1009")
  val DUP_KEYNAME = SqlState("S1009")
  val DUP_ENTRY = SqlState("S1009")
  val WRONG_FIELD_SPEC = SqlState("S1009")
  val PARSE_ERROR = SqlState("42000")
  val EMPTY_QUERY = SqlState("42000")
  val NONUNIQ_TABLE = SqlState("S1009")
  val INVALID_DEFAULT = SqlState("S1009")
  val MULTIPLE_PRI_KEY = SqlState("S1009")
  val TOO_MANY_KEYS = SqlState("S1009")
  val TOO_MANY_KEY_PARTS = SqlState("S1009")
  val TOO_LONG_KEY = SqlState("S1009")
  val KEY_COLUMN_DOES_NOT_EXITS = SqlState("S1009")
  val BLOB_USED_AS_KEY = SqlState("S1009")
  val TOO_BIG_FIELDLENGTH = SqlState("S1009")
  val WRONG_AUTO_KEY = SqlState("S1009")
  val FORCING_CLOSE = SqlState("08S01")
  val IPSOCK_ERROR = SqlState("08S01")
  val NO_SUCH_INDEX = SqlState("S1009")
  val WRONG_FIELD_TERMINATORS = SqlState("S1009")
  val BLOBS_AND_NO_TERMINATED = SqlState("S1009")
  val CANT_REMOVE_ALL_FIELDS = SqlState("42000")
  val CANT_DROP_FIELD_OR_KEY = SqlState("42000")
  val BLOB_CANT_HAVE_DEFAULT = SqlState("42000")
  val WRONG_DB_NAME = SqlState("42000")
  val WRONG_TABLE_NAME = SqlState("42000")
  val TOO_BIG_SELECT = SqlState("42000")
  val UNKNOWN_PROCEDURE = SqlState("42000")
  val WRONG_PARAMCOUNT_TO_PROCEDURE = SqlState("42000")
  val UNKNOWN_TABLE = SqlState("42S02")
  val FIELD_SPECIFIED_TWICE = SqlState("42000")
  val UNSUPPORTED_EXTENSION = SqlState("42000")
  val TABLE_MUST_HAVE_COLUMNS = SqlState("42000")
  val UNKNOWN_CHARACTER_SET = SqlState("42000")
  val TOO_BIG_ROWSIZE = SqlState("42000")
  val WRONG_OUTER_JOIN = SqlState("42000")
  val NULL_COLUMN_IN_INDEX = SqlState("42000")
  val HOST_IS_BLOCKED = SqlState("08004")
  val HOST_NOT_PRIVILEGED = SqlState("08004")
  val PASSWORD_ANONYMOUS_USER = SqlState("42000")
  val PASSWORD_NOT_ALLOWED = SqlState("42000")
  val PASSWORD_NO_MATCH = SqlState("42000")
  val WRONG_VALUE_COUNT_ON_ROW = SqlState("21S01")
  val INVALID_USE_OF_NULL = SqlState("S1000")
  val REGEXP_ERROR = SqlState("42000")
  val MIX_OF_GROUP_FUNC_AND_FIELDS = SqlState("42000")
  val NONEXISTING_GRANT = SqlState("42000")
  val TABLEACCESS_DENIED_ERROR = SqlState("42000")
  val COLUMNACCESS_DENIED_ERROR = SqlState("42000")
  val ILLEGAL_GRANT_FOR_TABLE = SqlState("42000")
  val GRANT_WRONG_HOST_OR_USER = SqlState("42000")
  val NO_SUCH_TABLE = SqlState("42S02")
  val NONEXISTING_TABLE_GRANT = SqlState("42000")
  val NOT_ALLOWED_COMMAND = SqlState("42000")
  val SYNTAX_ERROR = SqlState("42000")
  val ABORTING_CONNECTION = SqlState("08S01")
  val NET_PACKET_TOO_LARGE = SqlState("08S01")
  val NET_READ_ERROR_FROM_PIPE = SqlState("08S01")
  val NET_FCNTL_ERROR = SqlState("08S01")
  val NET_PACKETS_OUT_OF_ORDER = SqlState("08S01")
  val NET_UNCOMPRESS_ERROR = SqlState("08S01")
  val NET_READ_ERROR = SqlState("08S01")
  val NET_READ_INTERRUPTED = SqlState("08S01")
  val NET_ERROR_ON_WRITE = SqlState("08S01")
  val NET_WRITE_INTERRUPTED = SqlState("08S01")
  val TOO_LONG_STRING = SqlState("42000")
  val TABLE_CANT_HANDLE_BLOB = SqlState("42000")
  val TABLE_CANT_HANDLE_AUTO_INCREMENT = SqlState("42000")
  val WRONG_COLUMN_NAME = SqlState("42000")
  val WRONG_KEY_COLUMN = SqlState("42000")
  val DUP_UNIQUE = SqlState("23000")
  val BLOB_KEY_WITHOUT_LENGTH = SqlState("42000")
  val PRIMARY_CANT_HAVE_NULL = SqlState("42000")
  val TOO_MANY_ROWS = SqlState("42000")
  val REQUIRES_PRIMARY_KEY = SqlState("42000")
  val KEY_DOES_NOT_EXITS = SqlState("42000")
  val CHECK_NO_SUCH_TABLE = SqlState("42000")
  val CHECK_NOT_IMPLEMENTED = SqlState("42000")
  val CANT_DO_THIS_DURING_AN_TRANSACTION = SqlState("25000")
  val NEW_ABORTING_CONNECTION = SqlState("08S01")
  val MASTER_NET_READ = SqlState("08S01")
  val MASTER_NET_WRITE = SqlState("08S01")
  val TOO_MANY_USER_CONNECTIONS = SqlState("42000")
  val LOCK_WAIT_TIMEOUT = SqlState("41000")
  val READ_ONLY_TRANSACTION = SqlState("25000")
  val NO_PERMISSION_TO_CREATE_USER = SqlState("42000")
  val LOCK_DEADLOCK = SqlState("41000")
  val NO_REFERENCED_ROW = SqlState("23000")
  val ROW_IS_REFERENCED = SqlState("23000")
  val CONNECT_TO_MASTER = SqlState("08S01")
  val WRONG_NUMBER_OF_COLUMNS_IN_SELECT = SqlState("21000")
  val USER_LIMIT_REACHED = SqlState("42000")
  val SPECIFIC_ACCESS_DENIED_ERROR = SqlState("42000")
  val NO_DEFAULT = SqlState("42000")
  val WRONG_VALUE_FOR_VAR = SqlState("42000")
  val WRONG_TYPE_FOR_VAR = SqlState("42000")
  val CANT_USE_OPTION_HERE = SqlState("42000")
  val NOT_SUPPORTED_YET = SqlState("42000")
  val WRONG_FK_DEF = SqlState("42000")
  val OPERAND_COLUMNS = SqlState("21000")
  val SUBQUERY_NO_ = SqlState("1")
  val ILLEGAL_REFERENCE = SqlState("42S22")
  val DERIVED_MUST_HAVE_ALIAS = SqlState("42000")
  val SELECT_REDUCED = SqlState("01000")
  val TABLENAME_NOT_ALLOWED_HERE = SqlState("42000")
  val NOT_SUPPORTED_AUTH_MODE = SqlState("08004")
  val SPATIAL_CANT_HAVE_NULL = SqlState("42000")
  val COLLATION_CHARSET_MISMATCH = SqlState("42000")
  val WARN_TOO_FEW_RECORDS = SqlState("01000")
  val WARN_TOO_MANY_RECORDS = SqlState("01000")
  val WARN_NULL_TO_NOTNULL = SqlState("S1000")
  val WARN_DATA_OUT_OF_RANGE = SqlState("01000")
  val WARN_DATA_TRUNCATED = SqlState("01000")
  val WRONG_NAME_FOR_INDEX = SqlState("42000")
  val WRONG_NAME_FOR_CATALOG = SqlState("42000")
  val UNKNOWN_STORAGE_ENGINE = SqlState("42000")
  val TRUNCATED_WRONG_VALUE = SqlState("22007")
  val SP_NO_RECURSIVE_CREATE = SqlState("S1000")
  val SP_ALREADY_EXISTS = SqlState("42000")
  val SP_DOES_NOT_EXIST = SqlState("42000")
  val SP_LILABEL_MISMATCH = SqlState("42000")
  val SP_LABEL_REDEFINE = SqlState("42000")
  val SP_LABEL_MISMATCH = SqlState("42000")
  val SP_UNINIT_VAR = SqlState("01000")
  val SP_BADSELECT = SqlState("0A000")
  val SP_BADRETURN = SqlState("42000")
  val SP_BADSTATEMENT = SqlState("0A000")
  val UPDATE_LOG_DEPRECATED_IGNORED = SqlState("42000")
  val UPDATE_LOG_DEPRECATED_TRANSLATED = SqlState("42000")
  val QUERY_INTERRUPTED = SqlState("S1000")
  val SP_WRONG_NO_OF_ARGS = SqlState("42000")
  val SP_COND_MISMATCH = SqlState("42000")
  val SP_NORETURN = SqlState("42000")
  val SP_NORETURNEND = SqlState("S1000")
  val SP_BAD_CURSOR_QUERY = SqlState("42000")
  val SP_BAD_CURSOR_SELECT = SqlState("42000")
  val SP_CURSOR_MISMATCH = SqlState("42000")
  val SP_CURSOR_ALREADY_OPEN = SqlState("24000")
  val SP_CURSOR_NOT_OPEN = SqlState("24000")
  val SP_UNDECLARED_VAR = SqlState("42000")
  val SP_FETCH_NO_DATA = SqlState("S1000")
  val SP_DUP_PARAM = SqlState("42000")
  val SP_DUP_VAR = SqlState("42000")
  val SP_DUP_COND = SqlState("42000")
  val SP_DUP_CURS = SqlState("42000")
  val SP_SUBSELECT_NYI = SqlState("0A000")
  val STMT_NOT_ALLOWED_IN_SF_OR_TRG = SqlState("0A000")
  val SP_VARCOND_AFTER_CURSHNDLR = SqlState("42000")
  val SP_CURSOR_AFTER_HANDLER = SqlState("42000")
  val SP_CASE_NOT_FOUND = SqlState("S1000")
  val DIVISION_BY_ZERO = SqlState("22012")
  val ILLEGAL_VALUE_FOR_TYPE = SqlState("22007")
  val PROCACCESS_DENIED_ERROR = SqlState("42000")
  val XAER_NOTA = SqlState("S1000")
  val XAER_INVAL = SqlState("S1000")
  val XAER_RMFAIL = SqlState("S1000")
  val XAER_OUTSIDE = SqlState("S1000")
  val XA_RMERR = SqlState("S1000")
  val XA_RBROLLBACK = SqlState("S1000")
  val NONEXISTING_PROC_GRANT = SqlState("42000")
  val DATA_TOO_LONG = SqlState("22001")
  val SP_BAD_SQLSTATE = SqlState("42000")
  val CANT_CREATE_USER_WITH_GRANT = SqlState("42000")
  val SP_DUP_HANDLER = SqlState("42000")
  val SP_NOT_VAR_ARG = SqlState("42000")
  val SP_NO_RETSET = SqlState("0A000")
  val CANT_CREATE_GEOMETRY_OBJECT = SqlState("22003")
  val TOO_BIG_SCALE = SqlState("42000")
  val TOO_BIG_PRECISION = SqlState("42000")
  val M_BIGGER_THAN_D = SqlState("42000")
  val TOO_LONG_BODY = SqlState("42000")
  val TOO_BIG_DISPLAYWIDTH = SqlState("42000")
  val XAER_DUPID = SqlState("S1000")
  val DATETIME_FUNCTION_OVERFLOW = SqlState("22008")
  val ROW_IS_REFERENCED_ = SqlState("2")
  val NO_REFERENCED_ROW_ = SqlState("2")
  val SP_BAD_VAR_SHADOW = SqlState("42000")
  val SP_WRONG_NAME = SqlState("42000")
  val SP_NO_AGGREGATE = SqlState("42000")
  val MAX_PREPARED_STMT_COUNT_REACHED = SqlState("42000")
  val NON_GROUPING_FIELD_USED = SqlState("42000")
  val FOREIGN_DUPLICATE_KEY = SqlState("23000")
  val CANT_CHANGE_TX_ISOLATION = SqlState("S1000")
  val WRONG_PARAMCOUNT_TO_NATIVE_FCT = SqlState("42000")
  val WRONG_PARAMETERS_TO_NATIVE_FCT = SqlState("42000")
  val WRONG_PARAMETERS_TO_STORED_FCT = SqlState("42000")
  val DUP_ENTRY_WITH_KEY_NAME = SqlState("23000")
  val XA_RBTIMEOUT = SqlState("S1000")
  val XA_RBDEADLOCK = SqlState("S1000")
  val FUNC_INEXISTENT_NAME_COLLISION = SqlState("42000")
  val DUP_SIGNAL_SET = SqlState("42000")
  val SIGNAL_WARN = SqlState("01000")
  val SIGNAL_NOT_FOUND = SqlState("S1000")
  val RESIGNAL_WITHOUT_ACTIVE_HANDLER = SqlState("S1000")
  val SPATIAL_MUST_HAVE_GEOM_COL = SqlState("42000")
  val DATA_OUT_OF_RANGE = SqlState("22003")
  val ACCESS_DENIED_NO_PASSWORD_ERROR = SqlState("28000")
  val TRUNCATE_ILLEGAL_FK = SqlState("42000")
  val DA_INVALID_CONDITION_NUMBER = SqlState("35000")
  val FOREIGN_DUPLICATE_KEY_WITH_CHILD_INFO = SqlState("23000")
  val FOREIGN_DUPLICATE_KEY_WITHOUT_CHILD_INFO = SqlState("23000")
  val CANT_EXECUTE_IN_READ_ONLY_TRANSACTION = SqlState("S1000")
  val ALTER_OPERATION_NOT_SUPPORTED = SqlState("0A000")
  val ALTER_OPERATION_NOT_SUPPORTED_REASON = SqlState("0A000")
  val DUP_UNKNOWN_IN_INDEX = SqlState("23000")
  val ACCESS_DENIED_CHANGE_USER_ERROR = SqlState("28000")
  val GET_STACKED_DA_WITHOUT_ACTIVE_HANDLER = SqlState("S1000")
  val INVALID_ARGUMENT_FOR_LOGARITHM = SqlState("S1000")
}
// vim: set ts=2 sw=2 sts=2 et:
